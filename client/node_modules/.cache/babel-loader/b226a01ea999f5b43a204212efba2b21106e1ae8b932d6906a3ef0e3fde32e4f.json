{"ast":null,"code":"var _jsxFileName = \"/root/Local-Service-Platform-SQLITE/client/src/components/AddNewService.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n// eslint-disable-next-line\nimport ReviewForm from './ReviewForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddNewService = ({\n  onAddService,\n  onAddReview\n}) => {\n  _s();\n  const [newServiceName, setNewServiceName] = useState('');\n  // eslint-disable-next-line\n  const [reviews, setReviews] = useState([]);\n  const {\n    serviceId\n  } = useParams();\n  const handleAddService = async () => {\n    if (newServiceName.trim() === '') {\n      alert('Please enter a service name');\n      return;\n    }\n    try {\n      // Make a POST request to add the new service\n      const response = await fetch('/services', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: newServiceName\n        })\n      });\n      if (response.ok) {\n        const newService = await response.json();\n        setServices(prevServices => [...prevServices, newService]);\n        onAddService(newService);\n        setNewServiceName('');\n      } else {\n        console.error('Failed to add new service');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleDeleteService = async id => {\n    try {\n      // Make a DELETE request to remove the service\n      const response = await fetch(`/services/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        setServices(prevServices => prevServices.filter(service => service.id !== id));\n      } else {\n        console.error('Failed to delete service');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleAddReview = async (serviceId, reviewData) => {\n    try {\n      // Make a POST request to add the new review\n      const response = await fetch(`/services/${serviceId}/reviews`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(reviewData)\n      });\n      if (response.ok) {\n        const newReview = await response.json();\n        setReviews(prevReviews => [...prevReviews, newReview]);\n        onAddReview(newReview);\n      } else {\n        console.error('Failed to add new review');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(AddNewService, \"FzPDvRYeqTizWmSxpxZN1mrVm5E=\", false, function () {\n  return [useParams];\n});\n_c = AddNewService;\nexport default AddNewService;\nvar _c;\n$RefreshReg$(_c, \"AddNewService\");","map":{"version":3,"names":["React","useState","useParams","ReviewForm","jsxDEV","_jsxDEV","AddNewService","onAddService","onAddReview","_s","newServiceName","setNewServiceName","reviews","setReviews","serviceId","handleAddService","trim","alert","response","fetch","method","headers","body","JSON","stringify","name","ok","newService","json","setServices","prevServices","console","error","handleDeleteService","id","filter","service","handleAddReview","reviewData","newReview","prevReviews","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/Local-Service-Platform-SQLITE/client/src/components/AddNewService.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n// eslint-disable-next-line\nimport ReviewForm from './ReviewForm';\n\nconst AddNewService = ({ onAddService, onAddReview }) => {\n  const [newServiceName, setNewServiceName] = useState('');\n  // eslint-disable-next-line\n  const [reviews, setReviews] = useState([]);\n  const { serviceId } = useParams();\n\n  const handleAddService = async () => {\n    if (newServiceName.trim() === '') {\n      alert('Please enter a service name');\n      return;\n    }\n\n    try {\n      // Make a POST request to add the new service\n      const response = await fetch('/services', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: newServiceName }),\n      });\n      if (response.ok) {\n        const newService = await response.json();\n        setServices(prevServices => [...prevServices, newService]);\n        onAddService(newService);\n        setNewServiceName('');\n      } else {\n        console.error('Failed to add new service');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleDeleteService = async (id) => {\n    try {\n      // Make a DELETE request to remove the service\n      const response = await fetch(`/services/${id}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        setServices(prevServices => prevServices.filter(service => service.id !== id));\n      } else {\n        console.error('Failed to delete service');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleAddReview = async (serviceId, reviewData) => {\n    try {\n      // Make a POST request to add the new review\n      const response = await fetch(`/services/${serviceId}/reviews`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(reviewData),\n      });\n      if (response.ok) {\n        const newReview = await response.json();\n        setReviews(prevReviews => [...prevReviews, newReview]);\n        onAddReview(newReview);\n      } else {\n        console.error('Failed to add new review');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      {/* Your component JSX */}\n    </div>\n  );\n};\n\nexport default AddNewService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}