{"ast":null,"code":"var _jsxFileName = \"/root/Local-Service-Platform-SQLITE/client/src/components/ServiceList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceList = () => {\n  _s();\n  const [services, setServices] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('/services').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Failed to fetch services');\n    }).then(data => {\n      setServices(data);\n    }).catch(error => {\n      setError(error.message);\n    });\n  }, []);\n  const handleDelete = async serviceId => {\n    try {\n      const response = await fetch(`/services/${serviceId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Service deleted successfully\n        // Update services list\n        setServices(services.filter(service => service.id !== serviceId));\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setError('An error occurred. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Service List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500 mb-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ServiceList, \"eHsFpYF1UfS7CsGcrY2CtW2rdjg=\");\n_c = ServiceList;\nexport default ServiceList;\nvar _c;\n$RefreshReg$(_c, \"ServiceList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ServiceList","_s","services","setServices","error","setError","fetch","then","response","ok","json","Error","data","catch","message","handleDelete","serviceId","method","filter","service","id","errorData","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/Local-Service-Platform-SQLITE/client/src/components/ServiceList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ServiceList = () => {\n  const [services, setServices] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch('/services')\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Failed to fetch services');\n      })\n      .then((data) => {\n        setServices(data);\n      })\n      .catch((error) => {\n        setError(error.message);\n      });\n  }, []);\n\n  const handleDelete = async (serviceId) => {\n    try {\n      const response = await fetch(`/services/${serviceId}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        // Service deleted successfully\n        // Update services list\n        setServices(services.filter((service) => service.id !== serviceId));\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setError('An error occurred. Please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"mt-8\">\n      <h2 className=\"text-2xl font-bold mb-4\">Service List</h2>\n      {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n      <ul>\n        {/* Render services */}\n      </ul>\n    </div>\n  );\n};\n\nexport default ServiceList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,WAAW,CAAC,CACfC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB;MACA,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdT,WAAW,CAACS,IAAI,CAAC;IACnB,CAAC,CAAC,CACDC,KAAK,CAAET,KAAK,IAAK;MAChBC,QAAQ,CAACD,KAAK,CAACU,OAAO,CAAC;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;IACxC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMF,KAAK,CAAE,aAAYU,SAAU,EAAC,EAAE;QACrDC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAIT,QAAQ,CAACC,EAAE,EAAE;QACf;QACA;QACAN,WAAW,CAACD,QAAQ,CAACgB,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKJ,SAAS,CAAC,CAAC;MACrE,CAAC,MAAM;QACL,MAAMK,SAAS,GAAG,MAAMb,QAAQ,CAACE,IAAI,CAAC,CAAC;QACvCL,QAAQ,CAACgB,SAAS,CAACjB,KAAK,CAAC;MAC3B;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdkB,OAAO,CAAClB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BC,QAAQ,CAAC,4CAA4C,CAAC;IACxD;EACF,CAAC;EAED,oBACEN,OAAA;IAAKwB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBzB,OAAA;MAAIwB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxDxB,KAAK,iBAAIL,OAAA;MAAGwB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAEpB;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtD7B,OAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAhDID,WAAW;AAAA6B,EAAA,GAAX7B,WAAW;AAkDjB,eAAeA,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}